/*
12293 - Box Game

두개의 박스가 있다. 한 박스에는 n개의 공이 있고 다른 박스에는 1개의 공이 들어있다. alice와 bob이 이 공과 박스를 가지고 하는 게임에 초대되었다. 다음과 같은 순서로 게임이 진행된다:
alice와 bob은 서로 번갈아 가며 움직이고 alice가 먼저 움직인다. 이때 플레이어는 공이 적게 들어간 박스를 찾아서 그 박스를 비우고 다른 박스에 있는 공을 재분배한다. 재분배가 끝났을때 각 박스에 공이 최소한 하나는 있어야 한다. 플레이어가 제대로 하지 않으면 페한다.

질문 : alice와 bob은 둘다 확실히 정직하다. 누가 이길까? 둘다 아주 영리하고 언제나 완벽한 전략을 따른다.

입력
여기에는 최대 300개의 테스트 케이스가 있다. 각 테스트 케이스는 하나의 정수n(2~10^9)이 한줄에 들어간다. n이 0이면 종료.

출력
한 줄마다 각 테스트 케이스의 승리자를 출력한다.

셈플 입력
2
3
4
0

셈플 출력
Alice
Bob
Alice


n개의 공이 있다고. 문제의 그림에는 n이 5인경우. Alice가 승리.
그러니까 (1,1)로 만드는 인간이 승리한다고. 승리하는 경우의 수를 찾아야 한다. 음 그 뭐더라 30인가 15인가 먼저 부르는사람이 지는건지 이기는건지 햇갈리는데 그런 게임이 생각난다.
각 단계에서 가장 많이 들어가 있는 박스의 공 수만 중요해 보인다. 적은 수가 들어간 박스의 공은 버리니까.

(2,1) -> (1,1) : alice win
(3,1) -> (2,1),(1,2) ... : bob win
(4,1) -> (3,1) ... : alice win
(4,1) -> (2,2) ... : bob win: 그래서 이 루트는 alice가 안함.
(5,1) -> (4,1) ... : bob win: 그래서 이 루트는 alice가 안함.
(5,1) -> (3,2) ... : alice win
(6,1) -> (5,1) ... : bob win: 그래서 이 루트는 alice가 안함.
(6,1) -> (4,2) ... : bob win: 그래서 이 루트는 alice가 안함.
(6,1) -> (3,3) ... : alice win
(7,1) -> (6,1) ... : bob win
(7,1) -> (5,2) ... : bob win
(7,1) -> (4,3) ... : bob win
(8,1) -> (7,1) ... : alice win
(8,1) -> (6,2) ... : bob win: 그래서 이 루트는 alice가 안함.
(8,1) -> (5,3) ... : bob win: 그래서 이 루트는 alice가 안함.
(8,1) -> (4,4) ... : bob win: 그래서 이 루트는 alice가 안함.
(9,1) -> (8,1) ... : bob win: 그래서 이 루트는 alice가 안함.
(9,1) -> (7,2) ... : alice win
(9,1) -> (6,3) ... : bob win: 그래서 이 루트는 alice가 안함.
(9,1) -> (5,4) ... : bob win: 그래서 이 루트는 alice가 안함.
(15,1) -> 
(31,1) -> (30,1)
(31,1) -> (16,15)

2, 4 5 6, 8 9 10 11 12 13 14, 16~30,
3 7 15 31

bob의 승리하는 n의 숫자가 앞의 숫자보다 2를 곱하고 1을 더하면 된다. 그러니까 3*2+1=7, 7*2+1=15, 15*2+1=31

function a(b){ while(b>1){b=b-1;b=b/2;}return b} 1을 리턴하면 bob의 슨리
n이 2의 정수승보다 1작으면 bob이 승리하는 숫자다.

위의 코드를 c로 넣으니 값이 잘 안나온다. int여서 그런가 보다. 실수형으로 연산을 반복하긴 찝찝하다. (다시 보니 1을 더하고 shift연산을 하면 됩니다.)
n에 1을 더하고 bitset에 =연산자로 바로 대입. count함수로 비트의 개수를 구함.
(NOTE: sizeof (decltype (N))*8 = sizeof(int)*8)

2015-09-07
*/
#include<iostream>
#include<bitset>
int main() {
	while (1) {
		int N;
		std::cin >> N;
		if (N == 0)
			break;
		std::bitset<sizeof(decltype(N))*8> b;
		b = N+1;
		if (b.count() == 1) {
			std::cout << "Bob\n";
		}
		else {
			std::cout << "Alice\n";
		}
	}
}
